

spring.application.name: bank-customers-service

server:
  port: 8085

management:
  metrics:
    enable:
      all: false
      http.server.requests: true
      system.cpu.count: true
      executor: true
      httpcomponents: true
  endpoints:
    customization: true
    web:
      base-path: /management
      exposure:
        include: info, health, metrics, prometheus, loggers
      userid: prod
      password: prod123

secure:
  endpoints:
    - "/api/**"
    - "/jwk/**"
    - "/swagger-ui.html"
    - "/swagger-ui/**"
    - "/swagger-resources/**"
    - "/v3/api-docs/**"
    - "/management/health/**"

crm:
  url: "http://localhost:2345"

schedule:
  batchjob1:
    fixed-rate: 5000
    initial-delay: 1000
  batchjob2: "*/5 * * ? * *"
  batchjobs:
    enabled: false


# Below configuration can be translated to the following
# 1. If 25% of the requests in the past 10 seconds fail, the circuit breaker will OPEN for 10 seconds
# 2. The next (1) request after 10 seconds will be checked. If it is not successful (another failure), sleep again for 10 seconds
# 3. Otherwise CLOSE the circuit and repeat above
resilience4j:
  circuitbreaker:
    instances:
      crmRemoteCall:
        failureRateThreshold: 25 #Configures the failure rate threshold in percentage. When the failure rate is equal or greater than the threshold the CircuitBreaker transitions to open and starts short-circuiting calls.
        permittedNumberOfCallsInHalfOpenState: 10 #Configures the number of permitted calls when the CircuitBreaker is half open.
        slidingWindowType: TIME_BASED #Configures the type of the sliding window which is used to record the outcome of calls when the CircuitBreaker is closed. Sliding window can either be count-based or time-based. If the sliding window is COUNT_BASED, the last slidingWindowSize calls are recorded and aggregated. If the sliding window is TIME_BASED, the calls of the last slidingWindowSize seconds recorded and aggregated.
        slidingWindowSize: 10 #Configures the size of the sliding window which is used to record the outcome of calls when the CircuitBreaker is closed.
        minimumNumberOfCalls: 5 #Configures the minimum number of calls which are required (per sliding window period) before the CircuitBreaker can calculate the error rate. For example, if minimumNumberOfCalls is 10, then at least 10 calls must be recorded, before the failure rate can be calculated. If only 9 calls have been recorded the CircuitBreaker will not transition to open even if all 9 calls have failed.
        waitDurationInOpenState: PT20S #The time that the CircuitBreaker should wait before transitioning from open to half-open.
        automaticTransitionFromOpenToHalfOpenEnabled: true #If set to true it means that the CircuitBreaker will automatically transition from open to half-open state and not call is need to trigger the transition.
        recordExceptions: #A list of exceptions that are recorded as a failure and thus increase the failure rate. Any exception matching or inheriting from one of the list counts as a failure, unless explicitly ignored via ignoreExceptions. If you specify a list of exceptions, all other exceptions count as a success, unless they are explicitly ignored by ignoreExceptions.
        ignoreExceptions: #A list of exceptions that are ignored and neither count as a failure nor success. Any exception matching or inheriting from one of the list will not count as a failure nor success, even if the exceptions is part of recordExceptions.
        eventConsumerBufferSize: 10
        registerHealthIndicator: false
        writableStackTraceEnabled: false

hazelcast:
  credentials:
      cluster-name: cluster.name
      connection-timeout-millis: 10000
      heartbeat-timeout-millis: 90000
      ip-list:
        - "127.0.0.1"


---

spring.config.activate.on-profile:
  - test
  - load-test

management:
  endpoints:
    customization: false
    web:
      userid: test
      password: test123


---

spring.config.activate.on-profile:
  - local

management:
  endpoints:
    customization: false
    web:
      userid: local
      password: local123